name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

env:
  IMAGE_NAME: receipt-processor-frontend

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      # Add your test command here when tests are added
      # - name: Run tests
      #   working-directory: frontend
      #   run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Build application
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: npm run build

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment:
      name: staging
      url: http://staging.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push frontend image to ECR
        run: |
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          export AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}
          export ECR_REPOSITORY=${{ secrets.ECR_FRONTEND_REPO || 'receipt-processor-frontend' }}
          export IMAGE_TAG=${{ github.sha }}
          
          # Pull image from GHCR
          docker pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Tag for ECR
          docker tag ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          
          # Push to ECR
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      - name: Deploy to ECS Staging
        run: |
          export AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}
          export CLUSTER=${{ secrets.ECS_CLUSTER_STAGING || 'receipt-processor-staging' }}
          export SERVICE=${{ secrets.ECS_SERVICE_FRONTEND || 'receipt-processor-frontend' }}
          
          aws ecs update-service \
            --cluster $CLUSTER \
            --service $SERVICE \
            --force-new-deployment \
            --region $AWS_REGION || echo "Service may not exist yet. Create it first."

      # Example for SSH deployment to VPS:
      # - name: Deploy to staging server via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.STAGING_HOST }}
      #     username: ${{ secrets.STAGING_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /opt/receipt-processor-staging
      #       docker-compose pull frontend
      #       docker-compose up -d frontend
      #       docker system prune -f

      # Example for Vercel deployment:
      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest
      #
      # - name: Pull Vercel Environment Information
      #   working-directory: frontend
      #   run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      #
      # - name: Build Project Artifacts
      #   working-directory: frontend
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      #
      # - name: Deploy Project Artifacts to Vercel
      #   working-directory: frontend
      #   run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deployment to production would happen here"
          echo "Image: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your deployment logic here (e.g., Vercel, AWS, etc.)

      # Example for SSH deployment to VPS:
      # - name: Deploy to production server via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.PRODUCTION_HOST }}
      #     username: ${{ secrets.PRODUCTION_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /opt/receipt-processor
      #       docker-compose pull frontend
      #       docker-compose up -d frontend
      #       docker system prune -f

      # Example for Vercel deployment:
      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest
      #
      # - name: Pull Vercel Environment Information
      #   working-directory: frontend
      #   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      #
      # - name: Build Project Artifacts
      #   working-directory: frontend
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      #
      # - name: Deploy Project Artifacts to Vercel
      #   working-directory: frontend
      #   run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
