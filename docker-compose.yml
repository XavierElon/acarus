version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: receipt-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-receipt_db}
    ports:
      - '${POSTGRES_PORT:-5439}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./receipt_processor/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-receipt_db}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - receipt-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: receipt-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD:-redis123}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - receipt-network

  # Rust Backend API
  backend:
    build:
      context: ./receipt_processor
      dockerfile: Dockerfile
    container_name: receipt-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/receipt_db
      REDIS_URL: redis://:redis123@redis:6379
      PORT: 8000
      RUST_LOG: ${RUST_LOG:-info}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-change-in-production}
    ports:
      - '${BACKEND_PORT:-8000}:8000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - receipt-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: receipt-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-change-this-in-production}
    ports:
      - '${FRONTEND_PORT:-3000}:3000'
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - receipt-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  receipt-network:
    driver: bridge
