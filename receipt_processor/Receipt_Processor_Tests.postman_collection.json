{
  "info": {
    "name": "Receipt Processor API - Test Suite",
    "description": "Comprehensive test suite for Receipt Processor API with automated assertions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "receiptId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "apiKey",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 200', function () {", "    pm.response.to.have.status(200);", "});", "", "// Test response time", "pm.test('Response time is less than 500ms', function () {", "    pm.expect(pm.response.responseTime).to.be.below(500);", "});", "", "// Test response body", "pm.test('Response contains expected message', function () {", "    pm.expect(pm.response.text()).to.include('running');", "});", "", "console.log('✅ Health check passed');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Verify the API is running and responsive"
      },
      "response": []
    },
    {
      "name": "2. Root Endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["pm.test('Status code is 200', function () {", "    pm.response.to.have.status(200);", "});", "", "pm.test('Response contains welcome message', function () {", "    pm.expect(pm.response.text()).to.include('Welcome');", "});", "", "console.log('✅ Root endpoint test passed');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        },
        "description": "Test the root endpoint"
      },
      "response": []
    },
    {
      "name": "3. Register User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// Test user object exists",
              "pm.test('User object is present', function () {",
              "    pm.expect(response).to.have.property('user');",
              "    pm.expect(response.user).to.have.property('id');",
              "    pm.expect(response.user).to.have.property('email');",
              "});",
              "",
              "// Test email matches",
              "pm.test('Email matches request', function () {",
              "    pm.expect(response.user.email).to.eql('test@example.com');",
              "});",
              "",
              "// Test UUID format",
              "pm.test('User ID is valid UUID', function () {",
              "    pm.expect(response.user.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);",
              "});",
              "",
              "console.log('✅ User registered successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new user account"
      },
      "response": []
    },
    {
      "name": "4. Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// Test response structure",
              "pm.test('Response has user and token', function () {",
              "    pm.expect(response).to.have.property('user');",
              "    pm.expect(response).to.have.property('token');",
              "});",
              "",
              "// Test user object",
              "pm.test('User object is valid', function () {",
              "    pm.expect(response.user).to.have.property('id');",
              "    pm.expect(response.user).to.have.property('email');",
              "    pm.expect(response.user.email).to.eql('test@example.com');",
              "});",
              "",
              "// Test token exists",
              "pm.test('Token is present', function () {",
              "    pm.expect(response.token).to.be.a('string');",
              "    pm.expect(response.token.length).to.be.greaterThan(0);",
              "});",
              "",
              "// Save token for later tests",
              "pm.collectionVariables.set('authToken', response.token);",
              "",
              "console.log('✅ User logged in successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "description": "Login with registered user credentials"
      },
      "response": []
    },
    {
      "name": "5. Create API Key",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// Test API key response structure",
              "pm.test('API key response is valid', function () {",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('key');",
              "    pm.expect(response).to.have.property('created_at');",
              "});",
              "",
              "// Test API key format",
              "pm.test('API key has correct format', function () {",
              "    pm.expect(response.key).to.match(/^ak_live_[a-f0-9]{32}$/);",
              "});",
              "",
              "// Test name matches",
              "pm.test('API key name matches', function () {",
              "    pm.expect(response.name).to.eql('Test API Key');",
              "});",
              "",
              "// Save API key for later tests",
              "pm.collectionVariables.set('apiKey', response.key);",
              "",
              "console.log('✅ API key created successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Test API Key\",\n  \"expires_at\": \"2025-12-31T23:59:59Z\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/api-keys",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "api-keys"]
        },
        "description": "Create an API key for the authenticated user"
      },
      "response": []
    },
    {
      "name": "6. Create Receipt - Valid",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 201 Created', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "// Parse response",
              "const response = pm.response.json();",
              "",
              "// Test receipt ID exists and is valid UUID",
              "pm.test('Receipt has valid UUID', function () {",
              "    pm.expect(response.id).to.be.a('string');",
              "    pm.expect(response.id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);",
              "});",
              "",
              "// Save receipt ID for later tests",
              "pm.collectionVariables.set('receiptId', response.id);",
              "",
              "// Test vendor name",
              "pm.test('Vendor name matches request', function () {",
              "    pm.expect(response.vendor_name).to.eql('Target');",
              "});",
              "",
              "// Test total amount",
              "pm.test('Total amount matches request', function () {",
              "    pm.expect(response.total_amount).to.eql(45.67);",
              "});",
              "",
              "// Test currency",
              "pm.test('Currency is USD', function () {",
              "    pm.expect(response.currency).to.eql('USD');",
              "});",
              "",
              "// Test items array exists",
              "pm.test('Receipt contains items', function () {",
              "    pm.expect(response.items).to.be.an('array');",
              "    pm.expect(response.items.length).to.eql(3);",
              "});",
              "",
              "// Test first item",
              "pm.test('First item is correct', function () {",
              "    const item = response.items[0];",
              "    pm.expect(item.name).to.eql('Milk');",
              "    pm.expect(item.quantity).to.eql(2);",
              "    pm.expect(item.unit_price).to.eql(4.99);",
              "});",
              "",
              "// Test timestamps exist",
              "pm.test('Timestamps are present', function () {",
              "    pm.expect(response.created_at).to.be.a('string');",
              "    pm.expect(response.updated_at).to.be.a('string');",
              "});",
              "",
              "// Test response time",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "console.log('✅ Receipt created with ID:', response.id);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vendor_name\": \"Target\",\n  \"total_amount\": 45.67,\n  \"currency\": \"USD\",\n  \"purchase_date\": \"2024-01-15T10:30:00Z\",\n  \"receipt_image_url\": \"https://example.com/receipt.jpg\",\n  \"items\": [\n    {\n      \"name\": \"Milk\",\n      \"quantity\": 2,\n      \"unit_price\": 4.99\n    },\n    {\n      \"name\": \"Bread\",\n      \"quantity\": 1,\n      \"unit_price\": 3.49\n    },\n    {\n      \"name\": \"Eggs\",\n      \"quantity\": 3,\n      \"unit_price\": 5.99\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "Create a new receipt with valid data"
      },
      "response": []
    },
    {
      "name": "4. Get Receipt by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "const expectedId = pm.collectionVariables.get('receiptId');",
              "",
              "// Test receipt ID matches",
              "pm.test('Receipt ID matches created receipt', function () {",
              "    pm.expect(response.id).to.eql(expectedId);",
              "});",
              "",
              "// Test all required fields exist",
              "pm.test('All required fields are present', function () {",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('vendor_name');",
              "    pm.expect(response).to.have.property('total_amount');",
              "    pm.expect(response).to.have.property('currency');",
              "    pm.expect(response).to.have.property('purchase_date');",
              "    pm.expect(response).to.have.property('items');",
              "    pm.expect(response).to.have.property('created_at');",
              "    pm.expect(response).to.have.property('updated_at');",
              "});",
              "",
              "// Test data integrity",
              "pm.test('Data matches created receipt', function () {",
              "    pm.expect(response.vendor_name).to.eql('Target');",
              "    pm.expect(response.total_amount).to.eql(45.67);",
              "    pm.expect(response.items.length).to.eql(3);",
              "});",
              "",
              "console.log('✅ Receipt retrieved successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts/{{receiptId}}",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "{{receiptId}}"]
        },
        "description": "Retrieve the receipt created in previous test"
      },
      "response": []
    },
    {
      "name": "5. Get Receipt - Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test 404 status for non-existent receipt", "pm.test('Status code is 404 Not Found', function () {", "    pm.response.to.have.status(404);", "});", "", "console.log('✅ 404 error handled correctly');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts/00000000-0000-0000-0000-000000000000",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "00000000-0000-0000-0000-000000000000"]
        },
        "description": "Test error handling for non-existent receipt"
      },
      "response": []
    },
    {
      "name": "6. Create Receipt - Different Vendor",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["pm.test('Status code is 201', function () {", "    pm.response.to.have.status(201);", "});", "", "const response = pm.response.json();", "", "pm.test('Vendor name is Walmart', function () {", "    pm.expect(response.vendor_name).to.eql('Walmart');", "});", "", "pm.test('Receipt has correct number of items', function () {", "    pm.expect(response.items.length).to.eql(2);", "});", "", "console.log('✅ Second receipt created successfully');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vendor_name\": \"Walmart\",\n  \"total_amount\": 78.99,\n  \"currency\": \"USD\",\n  \"purchase_date\": \"2024-01-20T14:45:00Z\",\n  \"receipt_image_url\": null,\n  \"items\": [\n    {\n      \"name\": \"Coffee\",\n      \"quantity\": 2,\n      \"unit_price\": 12.99\n    },\n    {\n      \"name\": \"Sugar\",\n      \"quantity\": 1,\n      \"unit_price\": 5.49\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "Create another receipt to test multiple receipts"
      },
      "response": []
    },
    {
      "name": "7. List All Receipts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// Test response structure",
              "pm.test('Response has correct structure', function () {",
              "    pm.expect(response).to.have.property('receipts');",
              "    pm.expect(response).to.have.property('total');",
              "    pm.expect(response).to.have.property('page');",
              "    pm.expect(response).to.have.property('limit');",
              "    pm.expect(response).to.have.property('total_pages');",
              "});",
              "",
              "// Test receipts array",
              "pm.test('Receipts is an array', function () {",
              "    pm.expect(response.receipts).to.be.an('array');",
              "});",
              "",
              "// Test pagination values",
              "pm.test('Pagination values are correct', function () {",
              "    pm.expect(response.page).to.be.a('number');",
              "    pm.expect(response.limit).to.be.a('number');",
              "    pm.expect(response.total).to.be.a('number');",
              "    pm.expect(response.total_pages).to.be.a('number');",
              "});",
              "",
              "// Test we have at least 2 receipts (from previous tests)",
              "pm.test('Has expected number of receipts', function () {",
              "    pm.expect(response.total).to.be.at.least(2);",
              "});",
              "",
              "console.log('✅ List receipts test passed');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "List all receipts with default pagination"
      },
      "response": []
    },
    {
      "name": "8. List Receipts with Filters",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "// Test response structure",
              "pm.test('Response has correct structure', function () {",
              "    pm.expect(response).to.have.property('receipts');",
              "    pm.expect(response).to.have.property('total');",
              "});",
              "",
              "// Test vendor filtering",
              "pm.test('All receipts match vendor filter', function () {",
              "    response.receipts.forEach(function(receipt) {",
              "        pm.expect(receipt.vendor_name.toLowerCase()).to.include('target');",
              "    });",
              "});",
              "",
              "console.log('✅ Filtered list receipts test passed');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts?vendor=Target&limit=10&page=1",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"],
          "query": [
            {
              "key": "vendor",
              "value": "Target"
            },
            {
              "key": "limit",
              "value": "10"
            },
            {
              "key": "page",
              "value": "1"
            }
          ]
        },
        "description": "List receipts filtered by vendor name with pagination"
      },
      "response": []
    },
    {
      "name": "9. Update Receipt",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test status code",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "const expectedId = pm.collectionVariables.get('receiptId');",
              "",
              "// Test receipt ID matches",
              "pm.test('Receipt ID matches original', function () {",
              "    pm.expect(response.id).to.eql(expectedId);",
              "});",
              "",
              "// Test updated vendor name",
              "pm.test('Vendor name was updated', function () {",
              "    pm.expect(response.vendor_name).to.eql('Updated Target');",
              "});",
              "",
              "// Test updated total amount",
              "pm.test('Total amount was updated', function () {",
              "    pm.expect(response.total_amount).to.eql(55.99);",
              "});",
              "",
              "// Test items were updated",
              "pm.test('Items were updated', function () {",
              "    pm.expect(response.items.length).to.eql(2);",
              "    pm.expect(response.items[0].name).to.eql('Updated Milk');",
              "});",
              "",
              "// Test timestamps exist",
              "pm.test('Timestamps are present', function () {",
              "    pm.expect(response.created_at).to.be.a('string');",
              "    pm.expect(response.updated_at).to.be.a('string');",
              "});",
              "",
              "console.log('✅ Receipt updated successfully');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vendor_name\": \"Updated Target\",\n  \"total_amount\": 55.99,\n  \"currency\": \"USD\",\n  \"purchase_date\": \"2024-01-15T10:30:00Z\",\n  \"receipt_image_url\": \"https://example.com/updated-receipt.jpg\",\n  \"items\": [\n    {\n      \"name\": \"Updated Milk\",\n      \"quantity\": 3,\n      \"unit_price\": 5.99\n    },\n    {\n      \"name\": \"Updated Bread\",\n      \"quantity\": 1,\n      \"unit_price\": 4.99\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/receipts/{{receiptId}}",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "{{receiptId}}"]
        },
        "description": "Update an existing receipt"
      },
      "response": []
    },
    {
      "name": "10. Update Receipt - Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test 404 status for non-existent receipt", "pm.test('Status code is 404 Not Found', function () {", "    pm.response.to.have.status(404);", "});", "", "console.log('✅ Update 404 error handled correctly');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vendor_name\": \"Updated Target\",\n  \"total_amount\": 55.99,\n  \"currency\": \"USD\",\n  \"purchase_date\": \"2024-01-15T10:30:00Z\",\n  \"receipt_image_url\": \"https://example.com/updated-receipt.jpg\",\n  \"items\": [\n    {\n      \"name\": \"Updated Milk\",\n      \"quantity\": 3,\n      \"unit_price\": 5.99\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/receipts/00000000-0000-0000-0000-000000000000",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "00000000-0000-0000-0000-000000000000"]
        },
        "description": "Test error handling for updating non-existent receipt"
      },
      "response": []
    },
    {
      "name": "11. Delete Receipt - Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test 404 status for non-existent receipt", "pm.test('Status code is 404 Not Found', function () {", "    pm.response.to.have.status(404);", "});", "", "console.log('✅ Delete 404 error handled correctly');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts/00000000-0000-0000-0000-000000000000",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "00000000-0000-0000-0000-000000000000"]
        },
        "description": "Test error handling for deleting non-existent receipt"
      },
      "response": []
    },
    {
      "name": "12. Delete Receipt",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 204 No Content', function () {", "    pm.response.to.have.status(204);", "});", "", "console.log('✅ Receipt deleted successfully');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts/{{receiptId}}",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "{{receiptId}}"]
        },
        "description": "Delete the receipt created in previous tests"
      },
      "response": []
    },
    {
      "name": "13. Verify Receipt Deleted",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 404 Not Found', function () {", "    pm.response.to.have.status(404);", "});", "", "console.log('✅ Receipt deletion verified');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts/{{receiptId}}",
          "host": ["{{baseUrl}}"],
          "path": ["receipts", "{{receiptId}}"]
        },
        "description": "Verify the receipt was actually deleted"
      },
      "response": []
    },
    {
      "name": "14. Test API Key Authentication",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 200', function () {", "    pm.response.to.have.status(200);", "});", "", "const response = pm.response.json();", "", "// Test response structure", "pm.test('Response has correct structure', function () {", "    pm.expect(response).to.have.property('receipts');", "    pm.expect(response).to.have.property('total');", "});", "", "console.log('✅ API key authentication works');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "X-API-Key",
            "value": "{{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "Test API key authentication for listing receipts"
      },
      "response": []
    },
    {
      "name": "15. Test Unauthorized Access",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 401 Unauthorized', function () {", "    pm.response.to.have.status(401);", "});", "", "console.log('✅ Unauthorized access properly rejected');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "Test that requests without authentication are rejected"
      },
      "response": []
    },
    {
      "name": "16. Test Invalid Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["// Test status code", "pm.test('Status code is 401 Unauthorized', function () {", "    pm.response.to.have.status(401);", "});", "", "console.log('✅ Invalid token properly rejected');"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid-token-12345"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/receipts",
          "host": ["{{baseUrl}}"],
          "path": ["receipts"]
        },
        "description": "Test that invalid JWT tokens are rejected"
      },
      "response": []
    }
  ]
}
